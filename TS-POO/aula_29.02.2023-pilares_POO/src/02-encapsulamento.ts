/* ENCAPSULAMENTO 

    Conforme o proprio nome sugere, a proposta Ã© ISOLAR o mÃ¡ximo possÃ­vel os atributos e mÃ©todos de uma classe de forma a esconder detalhes de funcionamento interno

    - Como aplicar? 
    Utilizando os modificadores de acesso. SÃ£o eles:

    1-  public    (+)  => visÃ­vel e modificÃ¡vel de qualquer parte da nossa aplicaÃ§Ã£o (Ã© o padrÃ£o, aplicado quando nÃ£o definimos o modificador)
    2 - private   (-)  => vÃ­sivel e acessÃ­vel apenas dentro da prÃ³pria classe (recomendado ser a primeira opÃ§Ã£o sempre)
    3 - protected (#)  => visÃ­vel e acessÃ­vel apenas dentro da prÃ³pria classe ou de classes derivadas (aprofundaremos no prÃ³ximo pilar da POO)



    - Sendo PRIVADOS os atributos de uma classe, como faÃ§o para acessar os valores dos atributos na execuÃ§Ã£o do software?
    Utilizando os mÃ©todos de acesso. Tem como Ãºnica funcionalidade prover ACESSO/LEITURA aos atributo privados, os quais julgamos que DEVEM ser acessados por outras classes ou partes do nosso software.
    SÃ£o chamados de GETTERS.

    GETTER'S - caracteristicas
    1 - Retornam o tipo do atributo que serÃ¡ provido o acesso;
    2 - NÃ£o recebe parÃ¢metro;
    3 - Seu nome Ã© composto pelo prefixo "get" seguido do nome do atributo a qual estarÃ¡ sendo provido o acesso;



    - Sendo PRIVADOS os atributos de uma classe, como faÃ§o para MODIFICAR os valores dos atributos na execuÃ§Ã£o do software?
    Utilizando os mÃ©todos modificadores. Tem como Ãºnica funcionalidade prover MODIFICAÃ‡ÃƒO aos atributos privados, os quais julgamos que PODEM ser modificados por outras classes ou partes do nosso software.
    SÃ£o chamados de SETTERS.

    SETTER'S - caracteristicas
    1 - NÃ£o possuem retorno;
    2 - Recebe por parÃ¢metro o valor a ser inputado no atributo;
    3 - Seu nome Ã© composto pelo prefixo "set" seguido do nome do atributo que iremos possibilitar a modificaÃ§Ã£o;



    ðŸ’¡ O MOTIVO:
    AtravÃ©s dos mÃ©todos acessores (GETTERS) podemos CONTROLAR como a informaÃ§Ã£o serÃ¡ retornada e atravÃ©s dos mÃ©todos modificadores (SETTERS) podemos CONTROLAR que tipo de dado serÃ¡ aceito para modificaÃ§Ã£o e validar alguma outra possÃ­vel regra para efetivar essa modificaÃ§Ã£o.

*/

export class Pessoa { 
    constructor(
        private _nome: string,
        private _cpf: string,
        private _telefone: string,
        private _email: string
    ) {
        this.validar();
    }

    public get nome() : string {
        return this._nome;
    }

    public get cpf() : string {
        const doisUltimos = this._cpf.substring(8,10)
        return `***.***.***-${doisUltimos}`;
    }

    public get telefone() : string {
        return this._telefone
    }

    public get email() : string {
        return this._email;
    }

    
    public set telefone(novoTelefone : string) {
        // 51999887766
        // 5132325555
        if(novoTelefone.length > 11 || novoTelefone.length < 10 ) {
            throw Error('Telefone invÃ¡lido')
        }

        this._telefone = novoTelefone;
    }

    public set email(novoEmail: string) {

        if(!novoEmail.includes('@')) {
            throw Error('E-mail invÃ¡lido')
        }

        this._email = novoEmail
    }

    private validar(): void {
        if(this._nome.length < 3) {
            throw Error('Nome invÃ¡lido')
        }

        if(this._cpf.length !== 11) {
            throw Error('CPF invÃ¡lido')
        }

        if(this._telefone.length > 11 || this._telefone.length < 10 ) {
            throw Error('Telefone invÃ¡lido')
        }

        if(!this._email.includes('@')) {
            throw Error('E-mail invÃ¡lido')
        }
    }
       
}




